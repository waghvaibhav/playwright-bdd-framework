function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { World } from "@cucumber/cucumber";
import * as allure from "allure-js-commons";

/**
 * @deprecated please use api exported by "allure-js-commons" instead.
 */

/**
 * @deprecated please use api exported by "allure-js-commons" instead.
 */
export class AllureCucumberWorld extends World {
  constructor() {
    super(...arguments);
    /**
     * @deprecated please use import { label } from "allure-js-commons" instead.
     */
    _defineProperty(this, "label", (name, value) => Promise.resolve(allure.label(name, value)));
    /**
     * @deprecated please use import { link } from "allure-js-commons" instead.
     */
    _defineProperty(this, "link", (type, url, name) => Promise.resolve(allure.link(url, name, type)));
    /**
     * @deprecated please use import { parameter } from "allure-js-commons" instead.
     */
    _defineProperty(this, "parameter", (name, value, options) => Promise.resolve(allure.parameter(name, value, options)));
    /**
     * @deprecated please use import { description } from "allure-js-commons" instead.
     */
    _defineProperty(this, "description", value => Promise.resolve(allure.description(value)));
    /**
     * @deprecated please use import { descriptionHtml } from "allure-js-commons" instead.
     */
    _defineProperty(this, "descriptionHtml", html => Promise.resolve(allure.descriptionHtml(html)));
    /**
     * @deprecated please use import { testCaseId } from "allure-js-commons" instead.
     */
    _defineProperty(this, "testCaseId", id => Promise.resolve(allure.testCaseId(id)));
    /**
     * @deprecated please use import { historyId } from "allure-js-commons" instead.
     */
    _defineProperty(this, "historyId", id => Promise.resolve(allure.historyId(id)));
    /**
     * @deprecated please use import { allureId } from "allure-js-commons" instead.
     */
    _defineProperty(this, "allureId", id => Promise.resolve(allure.allureId(id)));
    /**
     * @deprecated please use import { displayName } from "allure-js-commons" instead.
     */
    _defineProperty(this, "displayName", name => Promise.resolve(allure.displayName(name)));
    /**
     * @deprecated please use import { attachment } from "allure-js-commons" instead.
     */
    _defineProperty(this, "attachment", (name, content, type) => Promise.resolve(allure.attachment(name, content, {
      contentType: type
    })));
    /**
     * @deprecated please use import { issue } from "allure-js-commons" instead.
     */
    _defineProperty(this, "issue", (name, url) => Promise.resolve(allure.issue(url, name)));
    /**
     * @deprecated please use import { tms } from "allure-js-commons" instead.
     */
    _defineProperty(this, "tms", (name, url) => Promise.resolve(allure.tms(url, name)));
    /**
     * @deprecated please use import { epic } from "allure-js-commons" instead.
     */
    _defineProperty(this, "epic", name => Promise.resolve(allure.epic(name)));
    /**
     * @deprecated please use import { feature } from "allure-js-commons" instead.
     */
    _defineProperty(this, "feature", name => Promise.resolve(allure.feature(name)));
    /**
     * @deprecated please use import { story } from "allure-js-commons" instead.
     */
    _defineProperty(this, "story", name => Promise.resolve(allure.story(name)));
    /**
     * @deprecated please use import { suite } from "allure-js-commons" instead.
     */
    _defineProperty(this, "suite", name => Promise.resolve(allure.suite(name)));
    /**
     * @deprecated please use import { parentSuite } from "allure-js-commons" instead.
     */
    _defineProperty(this, "parentSuite", name => Promise.resolve(allure.parentSuite(name)));
    /**
     * @deprecated please use import { subSuite } from "allure-js-commons" instead.
     */
    _defineProperty(this, "subSuite", name => Promise.resolve(allure.subSuite(name)));
    /**
     * @deprecated please use import { owner } from "allure-js-commons" instead.
     */
    _defineProperty(this, "owner", name => Promise.resolve(allure.owner(name)));
    /**
     * @deprecated please use import { severity } from "allure-js-commons" instead.
     */
    _defineProperty(this, "severity", name => Promise.resolve(allure.severity(name)));
    /**
     * @deprecated please use import { layer } from "allure-js-commons" instead.
     */
    _defineProperty(this, "layer", name => Promise.resolve(allure.layer(name)));
    /**
     * @deprecated please use import { tag } from "allure-js-commons" instead.
     */
    _defineProperty(this, "tag", name => Promise.resolve(allure.tag(name)));
    /**
     * @deprecated please use import { step } from "allure-js-commons" instead.
     */
    _defineProperty(this, "step", (name, body) => Promise.resolve(allure.step(name, body)));
  }
}
//# sourceMappingURL=legacy.js.map